<?php

require_once "barcode_parent_class.php";

class CODE128 extends Barcode
{

    private $start ="StartCodeB";
    private $stop = "Stop";
    private $modulo = 103; 
    private $table;    

    function __construct($val) {
        $this->value = $val;
    }

    public function generate_barcode()
    {
	$retval = "Hello<br>";
	$retval .= "CODE128: " . $this->val . "<br>";
	$retval .= "Checksum: " . $this->calculate_checksum($this->value);
        return $retval;
    }

    public function calculate_checksum($input) {
    	$tbl = $this->generate_code128B_table();
	$sum = 0;
	$sum += $tbl[$this->start][0];
    	for($i = 0; $i < strlen($input); $i++) {
	       $curchar = substr($input, $i, 1);
	       $sum += ($tbl[$curchar][0] * ($i + 1));
	}
        return $sum % $this->modulo;
    }

    public function calculate_binary_sequence($input, $table) {
        return "";
    }

    /**
     * Creates an associative array containing Code128 B data
     *
     * Key: Character
     *
     * Value: array(
     * 0=>Code128_Value
     * 1=>ASCII_Value
     * 2=>ASCII_Character
     * 3=>Binary_Sequence
     * 4=>Width_Sequence
     * )
     *
     * @return array the associative array as specified in the comment above
     */
    function generate_code128B_table() {
        $code_128B_table = array(
            "ReverseStop" => array(-1, -1, -1, "11010111000", "211133"),
            "StopPattern" => array(-1, 211, "Ó", "1100011101011", "2331112"),
            " " => array(0, 32, " ", "11011001100", "212222"),
            "!" => array(1, 33, "!", "11001101100", "222122"),
            "\"" => array(2, 34, "\"", "11001100110", "222221"),
            "#" => array(3, 35, "#", "10010011000", "121223"),
            "$" => array(4, 36, "$", "10010001100", "121322"),
            "%" => array(5, 37, "%", "10001001100", "131222"),
            "&" => array(6, 38, "&", "10011001000", "122213"),
            "'" => array(7, 39, "'", "10011000100", "122312"),
            "(" => array(8, 40, "(", "10001100100", "132212"),
            ")" => array(9, 41, ")", "11001001000", "221213"),
            "*" => array(10, 42, "*", "11001000100", "221312"),
            "+" => array(11, 43, "+", "11000100100", "231212"),
            "," => array(12, 44, ",", "10110011100", "112232"),
            "-" => array(13, 45, "-", "10011011100", "122132"),
            "." => array(14, 46, ".", "10011001110", "122231"),
            "/" => array(15, 47, "/", "10111001100", "113222"),
            "0" => array(16, 48, "0", "10011101100", "123122"),
            "1" => array(17, 49, "1", "10011100110", "123221"),
            "2" => array(18, 50, "2", "11001110010", "223211"),
            "3" => array(19, 51, "3", "11001011100", "221132"),
            "4" => array(20, 52, "4", "11001001110", "221231"),
            "5" => array(21, 53, "5", "11011100100", "213212"),
            "6" => array(22, 54, "6", "11001110100", "223112"),
            "7" => array(23, 55, "7", "11101101110", "312131"),
            "8" => array(24, 56, "8", "11101001100", "311222"),
            "9" => array(25, 57, "9", "11100101100", "321122"),
            ":" => array(26, 58, ":", "11100100110", "321221"),
            ";" => array(27, 59, ";", "11101100100", "312212"),
            "<" => array(28, 60, "<", "11100110100", "322112"),
            "=" => array(29, 61, "=", "11100110010", "322211"),
            ">" => array(30, 62, ">", "11011011000", "212123"),
            "?" => array(31, 63, "?", "11011000110", "212321"),
            "@" => array(32, 64, "@", "11000110110", "232121"),
            "A" => array(33, 65, "A", "10100011000", "111323"),
            "B" => array(34, 66, "B", "10001011000", "131123"),
            "C" => array(35, 67, "C", "10001000110", "131321"),
            "D" => array(36, 68, "D", "10110001000", "112313"),
            "E" => array(37, 69, "E", "10001101000", "132113"),
            "F" => array(38, 70, "F", "10001100010", "132311"),
            "G" => array(39, 71, "G", "11010001000", "211313"),
            "H" => array(40, 72, "H", "11000101000", "231113"),
            "I" => array(41, 73, "I", "11000100010", "231311"),
            "J" => array(42, 74, "J", "10110111000", "112133"),
            "K" => array(43, 75, "K", "10110001110", "112331"),
            "L" => array(44, 76, "L", "10001101110", "132131"),
            "M" => array(45, 77, "M", "10111011000", "113123"),
            "N" => array(46, 78, "N", "10111000110", "113321"),
            "O" => array(47, 79, "O", "10001110110", "133121"),
            "P" => array(48, 80, "P", "11101110110", "313121"),
            "Q" => array(49, 81, "Q", "11010001110", "211331"),
            "R" => array(50, 82, "R", "11000101110", "231131"),
            "S" => array(51, 83, "S", "11011101000", "213113"),
            "T" => array(52, 84, "T", "11011100010", "213311"),
            "U" => array(53, 85, "U", "11011101110", "213131"),
            "V" => array(54, 86, "V", "11101011000", "311123"),
            "W" => array(55, 87, "W", "11101000110", "311321"),
            "X" => array(56, 88, "X", "11100010110", "331121"),
            "Y" => array(57, 89, "Y", "11101101000", "312113"),
            "Z" => array(58, 90, "Z", "11101100010", "312311"),
            "[" => array(59, 91, "[", "11100011010", "332111"),
            "\\" => array(60, 92, "\\", "11101111010", "314111"),
            "]" => array(61, 93, "]", "11001000010", "221411"),
            "^" => array(62, 94, "^", "11110001010", "431111"),
            "_" => array(63, 95, "_", "10100110000", "111224"),
            "`" => array(64, 96, "`", "10100001100", "111422"),
            "a" => array(65, 97, "a", "10010110000", "121124"),
            "b" => array(66, 98, "b", "10010000110", "121421"),
            "c" => array(67, 99, "c", "10000101100", "141122"),
            "d" => array(68, 100, "d", "10000100110", "141221"),
            "e" => array(69, 101, "e", "10110010000", "112214"),
            "f" => array(70, 102, "f", "10110000100", "112412"),
            "g" => array(71, 103, "g", "10011010000", "122114"),
            "h" => array(72, 104, "h", "10011000010", "122411"),
            "i" => array(73, 105, "i", "10000110100", "142112"),
            "j" => array(74, 106, "j", "10000110010", "142211"),
            "k" => array(75, 107, "k", "11000010010", "241211"),
            "l" => array(76, 108, "l", "11001010000", "221114"),
            "m" => array(77, 109, "m", "11110111010", "413111"),
            "n" => array(78, 110, "n", "11000010100", "241112"),
            "o" => array(79, 111, "o", "10001111010", "134111"),
            "p" => array(80, 112, "p", "10100111100", "111242"),
            "q" => array(81, 113, "q", "10010111100", "121142"),
            "r" => array(82, 114, "r", "10010011110", "121241"),
            "s" => array(83, 115, "s", "10111100100", "114212"),
            "t" => array(84, 116, "t", "10011110100", "124112"),
            "u" => array(85, 117, "u", "10011110010", "124211"),
            "v" => array(86, 118, "v", "11110100100", "411212"),
            "w" => array(87, 119, "w", "11110010100", "421112"),
            "x" => array(88, 120, "x", "11110010010", "421211"),
            "y" => array(89, 121, "y", "11011011110", "212141"),
            "z" => array(90, 122, "z", "11011110110", "214121"),
            "{" => array(91, 123, "{", "11110110110", "412121"),
            "|" => array(92, 124, "|", "10101111000", "111143"),
            "}" => array(93, 125, "}", "10100011110", "111341"),
            "~" => array(94, 126, "~", "10001011110", "131141"),
            "DEL" => array(95, 200, "È", "10111101000", "114113"),
            "FNC3" => array(96, 201, "É", "10111100010", "114311"),
            "FNC2" => array(97, 202, "Ê", "11110101000", "411113"),
            "ShiftB" => array(98, 203, "Ë", "11110100010", "411311"),
            "CodeC" => array(99, 204, "Ì", "10111011110", "113141"),
            "FNC4" => array(100, 205, "Í", "10111101110", "114131"),
            "CodeA" => array(101, 206, "Î", "11101011110", "311141"),
            "FNC1" => array(102, 207, "Ï", "11110101110", "411131"),
            "StartCodeA" => array(103, 208, "Ð", "11010000100", "211412"),
            "StartCodeB" => array(104, 209, "Ñ", "11010010000", "211214"),
            "StartCodeC" => array(105, 210, "Ò", "11010011100", "211232"),
            "Stop" => array(106, -1, -1, "11000111010", "233111")
        );
        return $code_128B_table;
    }
}

?>